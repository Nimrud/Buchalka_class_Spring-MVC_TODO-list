1) CHALLENGE 1 (project setup)
    1) add dependencies for the following artifacts:
        => spring-webmvc
        => lombok
        => logback-classic
        => javax.annotation-api
    2) setup the maven-compiler plugin like in Spring_Guess-the-number-game project
        (w obecne wersji już niepotrzebne - Maven jest już zainstalowany)
        kod:
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>${maven.version}</version>
                        <configuration>
                            <target>${java.version}</target>
                            <source>${java.version}</source>
                            <release>${java.version}</release>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
    3) add logback.xml file from the before mentioned project
    4) execute Maven goals clean and install after setting up all dependencies
    tip: use Maven properties whenever you can
2) Dodanie pluginu Maven WAR (Web Application Archive)
    1) dodanie paczki WAR do projektu:
        -> w pliku pom.xml dodanie tagu <packaging>war</packaging>
        -> dodajemy najnowszą wersję pluginu w tym pliku:
                <build>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-war-plugin</artifactId>
                            <version>3.3.1</version>
                            <configuration>
                                <failOnMissingWebXml>false</failOnMissingWebXml>
                            </configuration>
                        </plugin>
                    </plugins>
                </build>
           WAŻNE: bez części <configuration> kompilacja się nie powiedzie (brak pliku 'web.xml')
           ...albo to samo, ale w wersji <dependency>
    2) w folderze 'main' (w src) tworzymy nowy folder 'webapp'
        (w nim znajdą się pliki takie jak .css czy .js)
    3) w powyższym folderze tworzymy folder 'WEB-INF'
        (w nim zazwyczaj umieszczamy pliki .jsp, konfiguracyjne, szablony itp., czyli pliki,
         które nie są bezpośrednio udostępniane na zewnątrz, ale są widoczne dla serwletów)
    4) w folderze 'webapp' tworzymy stronę główną (np. 'index.html')
3) Dodanie pluginu Maven Cargo (ten plugin uruchamia serwer Tomcat)
    -> w pliku 'pom.xml', w sekcji plugins dodajemy
        <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven3-plugin</artifactId>
            <version>1.9.6</version>
            <configuration>
                <container>
                    <containerId>tomcat9x</containerId>
                    <type>embedded</type>
                </container>
            </configuration>
        </plugin>
    -> Maven -> reload all -> execute Maven goal -> mvn clean install
    -> Maven -> [project] -> Plugins -> cargo -> cargo:run
    -> odpalamy przeglądarkę (http://localhost:8080/[projekt]/index.html)
    UWAGA! Wpisy Loggera się nie wyświetlają w konsoli, jeśli używamy Tomcata 10 (działają dla wersji 9x)
4) Tworzenie Dispatcher Servletu (dyspozytora)
    -> tworzymy folder 'config' w folderze 'java', a nim klasę WebConfig
        (musi być oznaczona adnotacją @EnableWebMvc)
    -> dodajemy dependency serwletu w pliku pom.xml (MVN Repo: Java Servlet API)
    -> rejestracja serwletu: implementujemy interfejs WebApplicationInitializer
        => tworzymy klasę WebAppInitializer (z powyższą implementacją)
        => implementujemy metodę onStartup
        => w niej tworzymy kontekst aplikacji (=Spring Container)
            oraz, używając tego kontekstu, rejestrujemy aplikację webową
            (uwaga: aby zarejestrować klasę, musi ona zostać oznaczona @Configuration)
        => tworzymy Dispatcher Servlet oraz rejestrujemy go używając servletContext
            (który jest parametrem metody onStartup)
            nadajemy też naszemu serwletowi nazwę
            używamy metod setLoadOnStartup (kontekst stworzy instancję serwletu i ją zainicjalizuje)
                oraz addMapping (nadanie serwletowi adresu URL)
    -> sprawdzamy, czy działa (Maven -> mvn clean install; Maven -> Plugins -> Cargo -> run)
5) TIP: jeśli po zmianie kodu chcemy szybko zrobić mvn clean, install oraz cargo:run,
    to klikamy prawym przyciskiem na cargo:run, wybieramy ModifyRun Configuration,
    a w nim zamieniamy:  cargo:run -f pom.xml
    na:  clean install cargo:run -f pom.xml
    Pojawi się nowa opcja w okienku Maven (Run Configurations)
6) Tworzenie pierwszego kontrolera
    [pakiet] -> nowy folder 'controller' -> nowa klasa 'Controller' (@Controller)
    w niej tworzymy metodę z adnotacjami
    @GetMapping  => w nawiasie podajemy końcówkę adresu URL, pod którym jest ona dostępna
    @ResponseBody  => jeśli chcemy zwrócić wpisany tekst do przeglądarki (zamiast widoku)
7) View Resolver oraz View
    1) folder webapp -> WEB-INF -> nowy folder 'view' -> nowy plik widoku (.jsp)
    2) w klasie WebConfig dodajemy Bean method 'viewResolver'
        doda ona do każdego widoku początek ścieżki oraz rozszerzenie .jsp
        (czyli każdemu widokowi będziemy nadawać samą nazwę)
    3) w klasie DemoController dodajemy nową metodę
        dodajemy @GetMapping oraz nazwę widoku (jako 'return')
8) Model
    przechowuje dane w formacie 'kucz - wartość'
    można dodawać dane na 2 sposoby:
        -> model.addAttribute("klucz", "wartość")
            do wartości można się odwoływać w pliku .jsp => ${klucz}
        -> za pomocą adnotacji @ModelAttribute("wartość")
            do wartości w nawiasie można się odwoływać w pliku .jsp => ${wartość}
9) CHALLENGE 2 (service)
    1) create an interface called DemoService with a method named getHelloMessage()
        that has a String parameter called user and create another method named
        getWelcomeMessage() without parameters - both methods should return a String
    2) create a class called DemoServiceImpl and annotate it with the @Service annotation
    3) the DemoServiceImpl class needs to implement the interface, and within the class,
        the method getHelloMessage() should return the String "Hello " + user,
        and the method getWelcomeMessage() should return the String
        "Welcome to this Demo Application"
    4) in DemoController inject/autowire DemoService using constructor injection
    5) in the controller methods, use DemoService to add attributes to the model
        instead of using Strings. In other words, call the service methods
        to get messages that are used as model attributes and displayed by JSP page
    6) you have to remove the user model attribute in the welcome() controller method
        and use another attribute instead (the value for the attribute should come
        from calling getHelloMessage() from DemoService
    7) modify the welcome.jsp file to use the new model attribute name instead of user
10) @RequestParam
    -> służy do przechwytywania parametrów z zapytania (np. /home/users?id=6), formularza itp.
        jeśli dodamy @RequestParam w parametrze kontrolera metody, to ona wtedy Spring przechwyci id=6
            public String displayUserInfo(@RequestParam int id) {}
    -> tą adnotacją zazwyczaj oznaczamy dane wymagane (jeśli ich nie dostarczymy, to będą errory)
    -> ma ona jednak opcję 'required', w której możemy oznaczyć parametr jako opcjonalny
    -> parametr zapytania można przekazać kontrolerowi w adresie URL, np.:
        http://localhost:8080/TODO-list/welcome?user=Chris
    -> jeśli w adresie chcemy przekazać 2 lub więcej parametrów, to rozdzielamy je znakiem &
11) Tworzenie modelu (klasa TodoItem i TodoData)
    -> elementy będziemy wyszukiwać po ID, więc dla tego pola trzeba nadpisać metody
        .equals() i .hashcode()
        Fn + Alt + Ins => zaznaczamy 'Accept subclasses as parameter (...)' oraz jako
            template wybieramy z dropdownu 'IntelliJ Default' => next => zaznaczamy tylko pole Id
    -> alternatywnie używamy adnotacji klasy @Data (funkcja Lomboka: kombinacja
        getterów, setterów, equals toString oraz hashcode'a
    -> jeśli chcemy za pomocą Lomboka wygenerować .equals() oraz .hashcode() tylko dla 1 pola,
        to dodajemy nad klasą adnotację:
            @EqualsAndHashCode(of = "[nazwa pola]")
                => metoda .equals() będzie porównywała obiekty po [nazwa pola]
        lub (dla kilku pól):
            @EqualsAndHashCode(of = {"[nazwa pola 1]", "[nazwa pola 2]"})
    -> klasa TodoData - przechowuje obiekty w pamięci komputera zamiast DB
12) aby uniknąć pomyłek przy wpisywaniu adresów "z palucha", warto stworzyć klasę,
    która będzie je przechowywać jako stałe (=> util => Mappings.class)
    -> klasa ta jest 'final', aby przez pomyłkę nie użyć w innej klasie 'extends Mappings'
    -> klasa ma prywatny konstruktor, aby nie było możliwe stworzenie jej instancji w innej klasie
    To samo z nazwami Widoków.
13) JSTL (JavaServer Pages Standard Tag Library) - kolekcja tagów JSP
    wspiera szereg typowych zadań, takich jak iteracja, tagi do manipulacji dokumentami XML, tagi SQL itp.
    Przykład:
        <c:forEach> - iteracja kolekcji
        <c:out> - wyświetlanie wyniku wyrażenia
        <c:url> - formatowanie adresu URL jako Stringa i zapisywanie do zmiennej
    1) Wymagane jest dodanie dependency w pliku pom.xml
    2) W pliku .jsp wykorzystującym JSTL, musimy najpierw zaimportować tagi (użyć taglib):
        <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
    3) aby wstawić dynamiczną listę, odwołujemy się do kontrolera z @ModelAttribute
        (który z kolei odwołuje się do klasy z listą), a następnie do samej listy przedmiotów:
        <c:forEach var="item" items="${todoData.items}">
        -> todoData: nazwa kontrolera z @ModelAttribute (tu: zwraca nowy obiekt TodoData)
        -> items: lista przedmiotów w klasie TodoData
        -> item: pojedynczy przedmiot z powyższej listy
    4) do poszczególnych rekordów odwołujemy się za pomocą <c:out>
        <c:out value="${item.[getter]}"/>
14) CHALLENGE 3
    1) create an interface called TodoItemService in the package service with methods:
        -> addItem() with 1 parameter of type TodoItem; it should not return a value;
        -> removeItem() with 1 int parameter called id; it should not return a value;
        -> getItem() with 1 int parameter called id; it should return a value of type TodoItem;
        -> updateItem() with 1 parameter of type TodoItem; it should not return a value;
        -> getData() with no parameters; it should return a value of type TodoData.
    2) create a class called TodoItemServiceImpl in the package service and annotate it
        with the @Service annotation
    3) create a final field of type TodoData and initialize it (e.g. "new TodoData()")
    4) the TodoItemServiceImpl class needs to implement the TodoItemService interface,
        and all the methods should be implemented in order to call the appropriate methods
        from TodoData class (for example, for the addItem() method,
        call addItem() from the TodoData class, which is declared as a field)
    5) in TodoController inject/autowire TodoItemService using constructor injection
    6) in the controller call the service methods to get todoData as a model attribute
        instead of using new TodoData();
    7) to test it out, within the TodoData constructor add another dummy TodoItem
        and confirm that the table displays 4 items
15) Dodanie formularza (Spring form tags)
    1) w pliku .jsp strony musimy aktywować tagi formularzy Springa:
        <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
    2) formularz w pliku .jsp musi zostać 'otoczony' tagiem:
        <form:form method="POST">
            [...]
        </form:form>
    3) zaletą Spring form tags jest definiowanie @ModelAttribute (powiązanie pól całego formularza
        z pojedynczym parametrem metody)
        nazwa @Attribute w parametrze metody name musi być taka sama jak nazwa w formularzu
    4) w kontrolerze tworzymy metodę do obsługi formularza
        (wywołana po wciśnięciu przycisku 'wyślij' w formularzu):
            @PostMapping(addItem)
            public String processItem(@ModelAttribute(todoItem) TodoItem item) {
                return "redirect:/items";
            }
        -> dodanie @ModelAttribute sprawia, że dane z formularza zostaną automatycznie
            przekazana do tej metody jako 1 obiekt TodoItem
        -> jako że nazwa @Attribute = nazwa w formularzu (inaczej nie zadziała), to w pliku .jsp:
            <form:form method="POST" modelAttribute="todoItem">
                 [...]
            </form:form>
    5) aby uniknąć pomyłek przy wpisywaniu nazw w pliku .jsp, warto zaimportować klasę,
        w której przechowujemy nazwy zmiennych
            <%@ page import="org.example.util.AttributeNames" %>
        dzięki temu do nazwy można się odwołać jako:
            <form:form method="POST" modelAttribute="${AttributeNames.TODO_ITEM}">
    6) w pliku .jsp tworzymy formularz
            <td>
                <form:input path="id" disabled="true" />
            </td>
        -> path name musi być takie samo jak nazwa analogicznego pola w klasie TodoItem
        -> disabled: aby użytkownik nie widział i mógł nadać numeru ID (będzie to automatyczne)
    7) w kontrolerze tworzymy 2 metody:
        -> do wyświetlania formularza (@GetMapping)
            => tworzymy nowy, pusty obiekt TodoItem
            => dodajemy go jako model attribute
            => jako 'return' podajemy nazwę strony .jsp
        -> do obsługi danych wysłanych za pomocą formularza (@PostMapping)
16) Home View
    -> w klasie WebConfig konfigurujemy (i definiujemy) widok .jsp
    -> musimy zaimplementować interfejs WebMvcConfigurer, który zawiera metody
        pozwalające na dostosowanie konfiguracji, takie jak np. addViewControllers
    -> metoda addViewControllers pozwala na dodanie prostego, automatycznego kontrolera
        do widoku .jsp, w którym nie używamy ModelAttributes (czyli nie ma w nim
        żadnej logiki biznesowej)
        => pozwala to nie dodawać nowej metody do kontrolera (większa przejrzystość kodu)
        => kiedy otworzymy URL aplikacji, to przekieruje nas na wskazany adres .jsp
17) Delete Item
    -> link do kasowania danego rekordu powinien się znaleźć obok niego
    -> z tego powodu, w widoku .jsp kod powinien się znaleźć wewnątrz <c:forEach>
    -> musimy się w nim odwołać do danego parametru przedmiotu z listy (np. ID),
        który to parametr zostanie przekazany do kontrolera:
            <c:forEach var="item" items="${todoData.items}">
                <c:url var="deleteItem" value="${Mappings.DELETE_ITEM}">
                    <c:param name="id" value="${item.id}"/>
                </c:url>
18) CHALLENGE 4
    Implement delete functionality
    Tips:
        1) create a method called deleteItem() in the TodoItemController with mapping
            for deleteItem (use the constant from the Mappings class)
        2) the method deleteItem() needs to have a parameter called id of type int
            annotated with @RequestParam
        3) in the method deleteItem(), call the service method removeItem()
            and redirect to items (like we did with the processItem() method)